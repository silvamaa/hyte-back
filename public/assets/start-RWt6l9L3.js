import"./modulepreload-polyfill-9p4a8sJU.js";/* empty css              */const m=async(n,o={})=>{let t;try{const e=await fetch(n,o);if(!e.ok)throw new Error(`HTTP ${e.status} - ${e.statusText}`);t=await e.json()}catch(e){console.error("fetchData() error",e),t={}}return t},p=document.querySelector(".logout a");p.addEventListener("click",()=>{localStorage.removeItem("token"),window.location.href="index.html"});const g=document.querySelector(".get_users");g.addEventListener("click",u);async function u(){console.log("Get all users");const n="http://127.0.0.1:3001/api/users",t={method:"GET",headers:{Authorization:"Bearer: "+localStorage.getItem("token")}};m(n,t).then(e=>{f(e)})}function f(n){console.log(n);const o=document.querySelector(".tbody");o.innerHTML="",n.forEach(t=>{console.log(t.user_id,t.username,t.user_level);const e=document.createElement("tr"),r=document.createElement("td");r.innerText=t.username;const s=document.createElement("td");s.innerText=t.user_level;const c=document.createElement("td"),l=document.createElement("button");l.className="check",l.setAttribute("data-id",t.user_id),l.innerText="Info",c.appendChild(l),l.addEventListener("click",E);const d=document.createElement("td"),a=document.createElement("button");a.className="del",a.setAttribute("data-id",t.user_id),a.innerText="Delete",d.appendChild(a),a.addEventListener("click",y);var i=document.createElement("td");i.innerText=t.user_id,e.appendChild(r),e.appendChild(s),e.appendChild(c),e.appendChild(d),e.appendChild(i),o.appendChild(e)})}function E(){console.log("Haet tietoa")}function y(n){console.log("Deletoit tietoa");const o=n.target.closest("tr").querySelector("td:last-child").innerText;console.log("User ID: ",o);const t=`http://127.0.0.1:3001/api/users/${o}`,r={method:"DELETE",headers:{Authorization:"Bearer "+localStorage.getItem("token")}};confirm(`Are you sure you want to delete user ID: ${o} `)&&fetch(t,r).then(c=>{if(c.ok)console.log("User deleted successfully"),u();else throw new Error("Failed to delete user")}).catch(c=>{console.error("Error deleting user: ",c)})}document.getElementById("moodForm").addEventListener("submit",async n=>{n.preventDefault();const o=new FormData(n.target),t=o.get("mood"),e=o.get("sleep_hours"),r=o.get("notes");console.log("Form Data:",t,e,r);const s=localStorage.getItem("token");if(!s){alert("User information not found. Please log in again.");return}const c={mood:t,sleep_hours:e,notes:r};console.log("Request Body:",c);const l="http://localhost:3001/api/entries",d={method:"POST",headers:{Authorization:"Bearer "+s,"Content-Type":"application/json"},body:JSON.stringify(c)};try{const a=await fetch(l,d),i=await a.text();if(console.log("Response text:",i),!a.ok)throw new Error(`HTTP error! status: ${a.status}`);alert("Data added successfully!")}catch(a){console.error("Error:",a),alert("Failed to add data. Error details can be found in the console.")}});const w=document.querySelector(".get_entries");w.addEventListener("click",h);async function h(){try{const n=localStorage.getItem("token");if(!n)throw new Error("User token not found. Please log in.");const o=await fetch("http://localhost:3001/api/entries",{method:"GET",headers:{Authorization:"Bearer "+n}});if(!o.ok)throw new Error("Failed to fetch diary entries.");const t=await o.json(),e=document.querySelector(".diary-entries");e.innerHTML="",t.forEach(r=>{const s=document.createElement("tr");s.innerHTML=`
        <td>${r.mood}</td>
        <td>${r.sleep_hours}</td>
        <td>${r.notes}</td>
        <td>${r.date}</td>
        <td>
          <button class="check" data-id="${r.entry_id}">Info</button>
          <button class="del" data-id="${r.entry_id}">Delete</button>
        </td>
      `,s.querySelector(".check").addEventListener("click",getInfo),s.querySelector(".del").addEventListener("click",k),e.appendChild(s)})}catch(n){console.error("Error:",n.message),alert("Failed to fetch diary entries. Please try again.")}}async function k(n){const o=n.target.dataset.id;if(confirm(`Are you sure you want to delete entry ID: ${o} ?`))try{const e=localStorage.getItem("token");if(!e)throw new Error("User token not found. Please log in.");if(!(await fetch(`http://localhost:3001/api/entries/${o}`,{method:"DELETE",headers:{Authorization:"Bearer "+e}})).ok)throw new Error("Failed to delete entry.");alert("Entry deleted successfully!"),h()}catch(e){console.error("Error:",e.message),alert("Failed to delete entry. Please try again.")}}
